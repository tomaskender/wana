#!/bin/sh

# makes grep behave according to posix standard
POSIXLY_CORRECT=yes

searching_for_command=1 #; command=""
searching_for_filter=1 #; filter=""; filter_param=""
log_loaded=0
while [ $# -ne 0 ]; do
  # load argument into PARAM
  PARAM=$1
  case $PARAM in
    -b | -a | -ip | -uri)
        # if searching_for_filter=0 > error
        if [ "$searching_for_filter" -eq 0 ]; then
            echo "FILTERS need to be loaded before COMMAND"
            exit 1
        fi
        if [ $# -eq 1 ]; then
            echo "No VALUE after FILTER parameter"
            exit 1
        fi
        #assign value
        shift
        VALUE="$1"
        case $PARAM in
            -b)
                if [ ! -z "$BEFORE" ];then
                    echo "BEFORE was already entered."
                    exit 1
                fi

                if ! echo "$VALUE" | grep -Eq "^[0-9]{4}-((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))( (([0-1][0-9])|(2[0-3]))(:[0-5][0-9](:[0-5][0-9])?)?)?$"; then
                    echo "Entered date does not correspond to format YYYY-MM-DD hh:mm:ss"
                    exit 1  
                fi
                
                if echo "$VALUE" | grep -Eq "^[0-9]{4}-((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))$"; then
                    VALUE="$VALUE 00"
                fi

                if echo "$VALUE" | grep -Eq "^.* (([0-1][0-9])|(2[0-3]))$"; then
                    VALUE="$VALUE:00"
                fi

                if echo "$VALUE" | grep -Eq "^.* (([0-1][0-9])|(2[0-3])):[0-5][0-9]$"; then
                    VALUE="$VALUE:00"
                fi
                
                BEFORE="$VALUE"
            ;;
            -a)
                if [ ! -z "$AFTER" ]; then
                    echo "AFTER was already entered."
                    exit 1
                fi

                if ! echo "$VALUE" | grep -Eq "^[0-9]{4}-((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))( (([0-1][0-9])|(2[0-3]))(:[0-5][0-9](:[0-5][0-9])?)?)?$"; then
                    echo "Entered date is not a correct format"
                    exit 1
                fi

                if ! echo "$VALUE" | grep -Eq "^[0-9]{4}-((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))( (([0-1][0-9])|(2[0-3]))(:[0-5][0-9](:[0-5][0-9])?)?)?$"; then
                    echo "Entered date does not correspond to format YYYY-MM-DD hh:mm:ss"
                    exit 1
                fi

                if echo "$VALUE" | grep -Eq "^[0-9]{4}-((0[1-9])|(1[0-2]))-((0[1-9])|([1-2][0-9])|(3[0-1]))$"; then
                    VALUE="$VALUE 00"
                fi
                
                if echo "$VALUE" | grep -Eq "^.* (([0-1][0-9])|(2[0-3]))$"; then
                    VALUE="$VALUE:00"
                fi  
              
                if echo "$VALUE" | grep -Eq "^.* (([0-1][0-9])|(2[0-3])):[0-5][0-9]$"; then
                    VALUE="$VALUE:00"
                fi  

                AFTER="$VALUE"
            ;;
            -ip)
                if [ ! -z "$IP" ]; then
                    echo "IP was already entered."
                    exit 1
                fi

                if  ( ! echo "$VALUE" | grep -Eq "^([1-9]|[1-9][0-9]|[1-9][0-9][0-9])\
                    (.([0-9]|[1-9][0-9]|[1-9][0-9][0-9])){3}$" ) |
                    ( ! echo "$VALUE" | grep -Eq "^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|\
                    ([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}\
                    (:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|\
                    [0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|\
                    ::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|\
                    ([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$" )
                    then
                    echo "Entered IP is of incorrect format."
                    exit 1
                fi
                IP=$VALUE
            ;;
            -uri)
                if [ ! -z "$URI" ]; then
                    echo "URI was already entered."
                    exit 1
                fi

                URI=$VALUE
            ;;
        esac
        #echo "Filter \"$PARAM\" was entered with value \"$VALUE\""
    ;;
    list-ip | list-hosts | list-uri | hist-ip | hist-load)
        # if searching_for_command=0 > error
        if [ "$searching_for_command" -eq 0 ]; then
            echo "COMMAND has already been entered."
            exit 1
        fi
        searching_for_filter=0;
        searching_for_command=0;
        COMMAND="$PARAM"
        #echo "Command \"$PARAM\" was issued"
    ;;
    *)
        searching_for_command=0
        searching_for_filter=0;
        log_loaded=1
        #FILES="$FILES $PARAM"
        if echo "$PARAM" | grep -Eq "^.*.gz$"; then
            ROWS="$ROWS
$(gzip -dc "$PARAM" 2>/dev/null)"
        else
            ROWS="$ROWS
$(cat "$PARAM" 2>/dev/null)"
        fi
        #echo "Filename \"$PARAM\""
    ;;
  esac

  shift
done

# if no file name is passed in argument, load from stdin
# if there were files loaded, then delete EOL from first line
if [ $log_loaded -eq 0 ]; then
    ROWS=$(awk '{print}')
else
    ROWS=$(printf "%s" "$ROWS" | sed "1 d")
fi
#echo "-----------------------------------------------------------"

if [ ! -z "$AFTER" ]; then
     ROWS=$(printf "%s" "$ROWS" | while read -r row; do
         FORMATTEDLOG=$(printf "%s" "$row" | awk '{print $4}' |\
         sed 's:Jan:01:; s:Feb:02:; s:Mar:03:; s:Apr:04:; s:May:05:; s:Jun:06:; s:Jul:07:; s:Aug:08:;
         s:Sep:09:; s:Oct:10:; s:Nov:11:; s:Dec:12:; s:/: :g; s/:/ /;
         s:-: :g; s/:/ /g; s/\[//' | awk '{ printf $3 $2 $1 $4 $5 $6}')

         FORMATTEDAFTER=$(echo "$AFTER" | sed -e 's:-::g' -e 's/://g' -e 's: ::')
         if [ "$FORMATTEDAFTER" -lt "$FORMATTEDLOG" ]; then
             printf "%s\n" "$row"
         fi  
     done)
fi

if [ ! -z "$BEFORE" ]; then
    ROWS=$(printf "%s" "$ROWS" | while read -r row; do
        FORMATTEDLOG=$(printf "%s" "$row" | awk '{print $4}' |\
        sed 's:Jan:01:; s:Feb:02:; s:Mar:03:; s:Apr:04:; s:May:05:; s:Jun:06:; s:Jul:07:; s:Aug:08:;
        s:Sep:09:; s:Oct:10:; s:Nov:11:; s:Dec:12:; s:/: :g; s/:/ /;
        s:-: :g; s/:/ /g; s/\[//' | awk '{ printf $3 $2 $1 $4 $5 $6}')
        FORMATTEDBEFORE=$(echo "$BEFORE" | sed -e 's:-::g' -e 's/://g' -e 's: ::')
        if [ "$FORMATTEDBEFORE" -gt "$FORMATTEDLOG" ]; then
            printf "%s\n" "$row"
        fi
    done)
fi

if [ ! -z "$IP" ]; then
    ROWS=$(printf "%s" "$ROWS" | awk -vIP="$IP" '{ if ( IP==$1 ) print }')
fi
if [ ! -z "$URI" ]; then
    ROWS=$(printf "%s" "$ROWS" | while read -r row; do
        if printf "%s\n" "$row" | awk '{print $7}' | grep -Eq "$URI" &&
            printf "%s\n" "$row" | awk '{print $6}' | grep -Eq "HEAD|POST|GET"; then
            printf "%s\n" "$row"
        fi
    done)
fi
case $COMMAND in
        list-ip)
            printf "%s\n" "$ROWS" | awk '{print $1}' | sort -k 1.1,1.1 | uniq
        ;;
        list-hosts)
            printf "%s\n" "$ROWS" | awk '{print $1}' | sort -k 1.1,1.1 | uniq |\
            while IFS= read -r row; do
                RESPONSE=$(host "$row")
                RET=$?
                if [ ! $RET -eq 0 ]; then
                    echo "$row" # vypise ip
                else
                    if echo "$RESPONSE" | awk '{print $5}' | grep -Eq "^for$"; then
                        RESPONSE="$(echo "$RESPONSE" | sed "1 d")" 
                    fi
                    
                    echo "$RESPONSE" | awk '{print $5}' # '{print substr($5, 1, length($5)-1)}' #odstranenie bodky
                fi
            done | sort | uniq
        ;;
        list-uri)
            printf "%s\n" "$ROWS" | while read -r row; do
                if printf "%s" "$row" | awk '{print $6}' | grep -Eq "HEAD|POST|GET"; then
                    printf "%s" "$row" | awk '{ print $7 }'
                fi
            done | sort | uniq
        ;;
        hist-ip)
            printf "%s\n" "$ROWS" | awk '{print $1}' | sort -n | uniq -c | sort -rn |\
            awk '{printf $2" ("$1"): "; for(i=0;i<$1;i++) printf "#"; printf "\n"}'
        ;;
        hist-load)
            printf "%s\n" "$ROWS" | awk '{print substr($4, 2, length($4)-7)}' | sort -n | uniq -c |\
            sed 's:Jan:01:; s:Feb:02:; s:Mar:03:; s:Apr:04:; s:May:05:; s:Jun:06:; s:Jul:07:; s:Aug:08:;
            s:Sep:09:; s:Oct:10:; s:Nov:11:; s:Dec:12:; s:/: :g; s/:/ /' |\
            awk '{printf $4"-"$3"-"$2" "$5":00 ("$1"): "; for(i=0;i<$1;i++) printf "#"; printf "\n"}'
        ;;
        *)
            printf "%s\n" "$ROWS"
        ;;
esac
